"""added slot to player_spells

Revision ID: ef76950d6c07
Revises: 5944ad05a0ae
Create Date: 2024-05-20 14:32:23.192261

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import Session

from src.model.spell import Spell
from src.model.player import PlayerSpellAssociation, Player

# revision identifiers, used by Alembic.
revision = 'ef76950d6c07'
down_revision = '5944ad05a0ae'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('player_spells', schema=None) as batch_op:
        batch_op.add_column(sa.Column('slot', sa.Integer(), nullable=True))

    op.create_check_constraint('ck_player_spell_slot', 'player_spells', 'slot >= 0 AND slot < 5')

    ## Now a bit of data migration
    session = Session(bind=op.get_bind())

    spells = session.query(Spell).all()

    # Fix existing relationships to have
    assocs = session.query(PlayerSpellAssociation).all()
    for player_spell in assocs:
        player_spell.slot = player_spell.spell_id % 5

    # Add missing spells to all players
    for player in session.query(Player).all():
        for spell in spells:
            if not any(assoc.spell_id == spell.id for assoc in player.spells_association):
                player.spells_association.append(PlayerSpellAssociation(spell_id=spell.id, slot=0 if spell.id == 0 else None))

    session.commit()

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('ck_player_spell_slot', 'player_spells')

    with op.batch_alter_table('player_spells', schema=None) as batch_op:
        batch_op.drop_column('slot')

    # ### end Alembic commands ###
